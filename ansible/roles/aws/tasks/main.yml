#- name: Assume role
#  sts_assume_role:
#    role_arn: "arn:aws:iam::cloudbees-iam:role/infra-developer-senior"
#    role_session_name: "someRoleSession"
#    region: "{{ aws_region }}"
#  register: assumed_role

- name: Create security group
  ec2_group:
    name: "{{ aws_group }}"
    vpc_id: "{{ vpc_id }}"
    description: "Jenkins/Docker training security group"
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8000
        to_port: 8000
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8080
        to_port: 8080
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8081
        to_port: 8081
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: basic_firewall

- name: Create instances
  ec2:
    key_name: "{{ aws_key_name }}"
    group: "{{ aws_group }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ami_id }}"
    vpc_subnet_id: "{{ subnet_id }}"
    assign_public_ip: yes
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ volume_size }}"
        delete_on_termination: true
    wait: true
    exact_count: "{{ instances }}"
    count_tag:
      Name: jenkins-docker-training
    instance_tags:
      Name: jenkins-docker-training
    region: "{{ aws_region }}"
  register: ec2

- debug: var=ec2.instances

- name: Add all instance public IPs to host group
  add_host:
    hostname: "{{ item.public_ip }}"
    groups: ec2hosts
  with_items: ec2.instances

- name: Copy instance variables to file
  lineinfile:
    dest: "{{ playbook_dir }}/instances.yml"
    regexp: "  - {{ item.public_ip }}"
    line: "  - {{ item.public_ip }}"
    create: yes
  with_items: ec2.instances

- name: Wait for SSH to come up
  wait_for:
    host: "{{ item.public_dns_name }}"
    port: 22
    delay: 60
    timeout: 500
    state: started
  with_items: ec2.instances
